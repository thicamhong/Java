<!-- On commente ca sinon cela afichera le contenu des jsp : <?xml version="1.0" encoding="ISO-8859-1" ?> -->
<jsp:root xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:f="http://java.sun.com/jsf/core" xmlns:h="http://java.sun.com/jsf/html" version="2.0">
    <jsp:directive.page language="java"
        contentType="text/html; charset=ISO-8859-1" pageEncoding="ISO-8859-1" />
    <jsp:text>
        <![CDATA[ <?xml version="1.0" encoding="ISO-8859-1" ?> ]]>
    </jsp:text>
    <jsp:text>
        <![CDATA[ <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> ]]>
    </jsp:text>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
<title>Insert title here</title>
</head>
<body>
<f:view>

<!-- 
quand on executera cette page, cela affichera Hello worl 0 + vide car mon book bean n'a pas encore ete initialise
Mais faire comme ca = pas bon
==> faire pattern Repository : des datas et repository qui va alimenter ces entites
Mais bookBean n'est pas une entite mais tres proche de la Vue. Ce qu'on ne veut pas afficher certains valeurs, one ne le fait pas
BookBean va mapper exactement ce qu'il y a ds l'ecran.
BookBean presque comme entite Book
Mais des fois on veut afficher prix TTC, on fait une adaptation. 
Nos beans sont pilotes par la VUE. C'est ce que l'on veut afficher
 -->
Hello world

<!-- h est l'extension de JSF -->
<!-- #name => name du @ManagedBean -->
<!-- myInt : propriete public de cette classe #name -->
<h:outputLabel value="#{bookBean.id}" />
<h:outputLabel value="#{bookBean.title}" />
<h:outputLabel value="#{bookBean.price}" />
</f:view>
</body>
</html>
</jsp:root>